/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos;

import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Maryam_Otunara
 */
public class schedule_backup extends javax.swing.JFrame {

    static String[] staffDetails;

    /**
     * Creates new form schedule_backup
     */
    public schedule_backup(String[] staffDetails) {
        initComponents();

        this.staffDetails = staffDetails;

        BackupProcess backupProcess = new BackupProcess();
        BackupThread backupThread = new BackupThread(backupProcess);
        backupThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jComboBox1 = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(244, 237, 237));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Schedule Backup");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Set Time");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Set Date");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 12, 1));
        jSpinner1.setBorder(javax.swing.BorderFactory.createTitledBorder("Hour"));

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        jSpinner2.setBorder(javax.swing.BorderFactory.createTitledBorder("Minute"));

        jSpinner3.setModel(new javax.swing.SpinnerNumberModel(0, 0, 60, 1));
        jSpinner3.setBorder(javax.swing.BorderFactory.createTitledBorder("Second"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Schedule");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton1)
                        .addGap(97, 97, 97)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)))
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(270, 270, 270))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(220, 220, 220))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jButton2)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Schedule

        try {
            int hour = (int) jSpinner1.getValue();
            int minute = (int) jSpinner2.getValue();
            int second = (int) jSpinner3.getValue();
            String meridian = jComboBox1.getSelectedItem().toString();
            SimpleDateFormat dat = new SimpleDateFormat("yyyy-MM-dd");
            String date = dat.format(jDateChooser1.getDate());
            int isexecuted = 0;

            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos",
                    "root", "Ilovesql123%");

            PreparedStatement ps = con.prepareStatement("INSERT INTO schedulebackup "
                    + "(hour, minute, second, meridian, date, isexecuted) VALUES (?, ?, ?, ?, ?, ?)",
                    Statement.RETURN_GENERATED_KEYS);

            ps.setInt(1, hour);
            ps.setInt(2, minute);
            ps.setInt(3, second);
            ps.setString(4, meridian);
            ps.setString(5, date);
            ps.setInt(6, isexecuted);

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                ResultSet generatedKeys = ps.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int scheduleId = generatedKeys.getInt(1);
                    JOptionPane.showMessageDialog(rootPane,
                            "Backup Scheduled Successfully with Schedule ID: " + scheduleId);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Failed to schedule backup");
            }

            jSpinner1.setModel(new SpinnerNumberModel());
            jSpinner2.setModel(new SpinnerNumberModel());
            jSpinner3.setModel(new SpinnerNumberModel());
            jComboBox1.setSelectedIndex(0);
            jDateChooser1.setDate(null);
            jDateChooser1.updateUI();

            ps.close();
            con.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Back to homepage

        dispose();
        new it_homepage(staffDetails).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public class BackupProcess {

        public void checkScheduledBackups() {
            // Retrieve current date and time
            LocalDateTime currentTime = LocalDateTime.now();

            try {
                // Connect to the database
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos",
                        "root", "Ilovesql123%");
                PreparedStatement ps = connection.prepareStatement("SELECT * FROM schedulebackup WHERE "
                        + "DATEDIFF(date, NOW()) BETWEEN 1 AND 5 AND isexecuted = 0");

                ResultSet resultSet = ps.executeQuery();

                while (resultSet.next()) {
                    // Retrieve backup details from the database
                    int hour = resultSet.getInt("hour");
                    int minute = resultSet.getInt("minute");
                    int second = resultSet.getInt("second");
                    String meridian = resultSet.getString("meridian");
                    LocalDate backupDate = resultSet.getObject("date", LocalDate.class);

                    // Check if the current time matches the scheduled time
                    if (matchesScheduledTime(currentTime, hour, minute, second, meridian, backupDate)) {
                        // Trigger backup process
                        String backupPath = "C:\\Users\\Maryam_Otunara\\OneDrive\\Documents\\Backup_SQL"; // Set the backup path
                        backupDatabase(backupPath);

                        // Update database to mark the backup as executed
                        int scheduleId = resultSet.getInt("scheduleid");
                        markBackupAsExecuted(scheduleId);
                    }
                }

                resultSet.close();
                ps.close();
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public void backupDatabase(String path) {
            // Backup database

            System.out.println("Backing up to " + path);
            String currentTime = LocalDateTime.now().toString();
            String command = "mysqldump -u " + "root" + " -p" + "Ilovesql123%" + " pos -r" + path + "/" + currentTime + "backup.sql";
            //      mysqldump -u shadow -pchirp123 posDB -r"/home/shadow/Documents/backup/backup.sql"
            try {
                Runtime.getRuntime().exec(command);
            } catch (Exception e) {
                e.printStackTrace();
            }
            //String cmd = "mysqldump -u " + "root" +" -p"+ "IloveSQL123%" + "--result-file=~/Documents/Backup_SQL";
            //Runtime.getRuntime().exec(cmd);
        }

        public void markBackupAsExecuted(int scheduleId) {
            try {
                // Connect to the database
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pos", "root", "Ilovesql123%");

                // Prepare the SQL update statement
                PreparedStatement ps = connection.prepareStatement("UPDATE schedulebackup SET isexecuted = 1 WHERE scheduleid = ?");
                ps.setInt(1, scheduleId);

                // Execute the update statement
                int rowsAffected = ps.executeUpdate();

                // Check if the update was successful
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(rootPane, "Backup marked as executed for schedule ID: " + scheduleId);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Failed to mark backup as executed for schedule ID: " + scheduleId);
                }

                // Close resources
                ps.close();
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        public boolean matchesScheduledTime(LocalDateTime currentTime, int hour, int minute, int second, String meridian, LocalDate backupDate) {
            // Convert hour to 24-hour format if necessary
            if (meridian.equalsIgnoreCase("PM") && hour != 12) {
                hour += 12;
            } else if (meridian.equalsIgnoreCase("AM") && hour == 12) {
                hour = 0;
            }

            // Check if current time matches the scheduled time
            return currentTime.getHour() == hour && currentTime.getMinute() == minute
                    && currentTime.getSecond() == second && currentTime.toLocalDate().isEqual(backupDate);
        }
    }

    public class BackupThread extends Thread {

        private volatile boolean running = true;
        private final BackupProcess backupProcess;

        public BackupThread(BackupProcess backupProcess) {
            this.backupProcess = backupProcess;
        }

        @Override
        public void run() {
            while (running) {
                // Execute backup process
                backupProcess.checkScheduledBackups();

                try {
                    // Sleep for a certain period before checking again
                    Thread.sleep(60000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(schedule_backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(schedule_backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(schedule_backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(schedule_backup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new schedule_backup(staffDetails).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    // End of variables declaration//GEN-END:variables
}
